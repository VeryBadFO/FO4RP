#define ERROR -1

#define _GET #( name, VAL ) 			data.dict.get( name, VAL ); DebugLog( "_Get: " + name, 2 )
#define GET	 #( name, TYPE, VAL ) 		TYPE VAL; 		 data.dict.get( name, VAL ); DebugLog( "Get: " + name, 2 )

#define _SET #( name, VAL )				data.dict.set( name, VAL ); DebugLog( "_Set: " + name, 2 )
#define SET  #( name, TYPE, VAL, DATA )	TYPE VAL = DATA; data.dict.set( name, VAL ); DebugLog( "Set: " + name, 2 )


#include "module/combat/Position.fos"

#include "module/combat/Logic.fos"

#include "module/combat/Data.fos"
//#include "module/combat/Attr.fos" 
///Пока воздержимся - модуль нуждается в самописных обёртках всех базовых классов фолача.

#include "module/combat/Segment.fos"
#include "module/combat/ProtoSegment.fos"

#include "module/combat/Segments.fos"
	#include "module/combat/segment/sample.fos"
	#include "module/combat/segment/load.fos"
	#include "module/combat/segment/save.fos"
	#include "module/combat/segment/flare_gun_shot.fos"
	#include "module/combat/segment/has_a_target.fos"
	#include "module/combat/segment/init_environment.fos"
/*
	#include "module/combat/segment/.fos"	
*/

//#include "module/combat/buffer.fos"

/* Тут ведём обсуждения:

Нужно как-то настроить систему дебага и отлова данных. Что бы не было излишков и флуда в консоль.

Сначала нужно определиться с тем, как будет передаваться логика в сегменты. 
А потом уже экспериментировать с оптимизацией их динамиики и наследования.

Через ГМку настраивается логика - список её модулей и т.п.

funcdef void StageFunction( CombatData@ data );
array<StageFunction@> CombatStages;
void SF_Flaregun(  CombatData@ data ) {}


if( набор условий, данные для которых хранятся в глобалспейсе )
{
	изменение чего-либо в этом спейсе
	
	промежуточный результат
	
	изменение порядка исполнения обработчиков
}

*/